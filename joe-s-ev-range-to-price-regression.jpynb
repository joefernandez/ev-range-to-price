{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7072273,"sourceType":"datasetVersion","datasetId":4072992}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/ev-range-to-price-regression-mad-mae-mse-mape-bfc1053f-b5e0-4e68-8eab-47261bfe2e43.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20241022/auto/storage/goog4_request&X-Goog-Date=20241022T211812Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=0f63f6a88c5fe8ce67338879e41664487df4d288140fd418174ba6927fba11b4bed253536f8700053a5aa940d0894fc72a679d4045298991f2fa1be3007585dd555909a05582c1bd6faa581404f66ae04d17f6057366623575c7d568a40a441e61e486987313e57ff6e8500ec12f3cd352429b66a98e43a45088b391b78af30b7b29ad49d6febb745bf096a3b996dc51510ef5c3440dde22ad0092bbc280e76389f870ddff060118a7a0de6d64b690e01680b85a83976d92493b8e6c76253fbe931ff05aafff85ea1ad3300d3f25077567526862f89b5c405996a7e5b8fbb6c35771ead435c90d492abf8828034fd660cd707fef968f128247a5b03f5ab06cc3","timestamp":1729632345242}]}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n# THEN FEEL FREE TO DELETE THIS CELL.\n# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n# NOTEBOOK.\nimport kagglehub\nfatihilhan_electric_vehicle_specifications_and_prices_path = kagglehub.dataset_download('fatihilhan/electric-vehicle-specifications-and-prices')\n\nprint('Data source import complete.')\n","metadata":{"id":"0ikXqoGQGDqP","executionInfo":{"status":"ok","timestamp":1729631998247,"user_tz":420,"elapsed":3173,"user":{"displayName":"","userId":""}},"outputId":"442c86b4-e861-4f23-e184-ff8a09590e90","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":"Downloading from https://www.kaggle.com/api/v1/datasets/download/fatihilhan/electric-vehicle-specifications-and-prices?dataset_version_number=1...\n"},{"output_type":"stream","name":"stderr","text":"100%|██████████| 10.3k/10.3k [00:00<00:00, 14.2MB/s]"},{"output_type":"stream","name":"stdout","text":"Extracting files...\n\nData source import complete.\n"},{"output_type":"stream","name":"stderr","text":"\n"}]},{"cell_type":"markdown","source":"# Range to Price Regression (Mark 2)\n\nBased on: \n\nThis notebook aims to uncover the linear relationship between range and price, if there is one. This notebook will do so with a basic linear regression. We will also show that the coefficient of determination ($R^2$) is equal to the correlation squared. Finally, we will show how to compute several metrics including mean absolute error (MAE), mean squared error (MSE), median absolute error (MAD), and mean absolute percentage error (MAPE).\n\nWe will use the EV Specification and Price Dataset available here: https://www.kaggle.com/datasets/fatihilhan/electric-vehicle-specifications-and-prices/data\n\nIf you liked this notebook or found it helpful, please upvote. Thank you.\n\n### Import Libraries","metadata":{"id":"jfti4F3IGDqQ"}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.metrics import mean_absolute_error as MAE, mean_squared_error as MSE\nfrom sklearn.metrics import median_absolute_error as MAD, mean_absolute_percentage_error as MAPE\nfrom sklearn.metrics import r2_score","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-12-08T05:31:20.930342Z","iopub.execute_input":"2023-12-08T05:31:20.930764Z","iopub.status.idle":"2023-12-08T05:31:23.471945Z","shell.execute_reply.started":"2023-12-08T05:31:20.930728Z","shell.execute_reply":"2023-12-08T05:31:23.470782Z"},"id":"rdfAzXgCGDqQ","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Load the Data & Get Info","metadata":{"id":"aN9_v1kKGDqQ"}},{"cell_type":"code","source":"evs = pd.read_csv(\"/kaggle/input/electric-vehicle-specifications-and-prices/EV_cars.csv\")\nprint(\"Shape of Data: \", evs.shape , \"\\n Data Information:\\n\")\nprint(evs.info())","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:45.068966Z","iopub.execute_input":"2023-12-08T05:31:45.069486Z","iopub.status.idle":"2023-12-08T05:31:45.128122Z","shell.execute_reply.started":"2023-12-08T05:31:45.069444Z","shell.execute_reply":"2023-12-08T05:31:45.126955Z"},"id":"37O9Ayn3GDqR","executionInfo":{"status":"error","timestamp":1729632008807,"user_tz":420,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"d42bd52c-9b49-4281-8c65-d1961c7c7aad","colab":{"base_uri":"https://localhost:8080/","height":356},"trusted":true},"execution_count":null,"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/input/electric-vehicle-specifications-and-prices/EV_cars.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-68ab1e172c33>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mevs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/kaggle/input/electric-vehicle-specifications-and-prices/EV_cars.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Shape of Data: \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;34m\"\\n Data Information:\\n\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/input/electric-vehicle-specifications-and-prices/EV_cars.csv'"]}]},{"cell_type":"markdown","source":"##### With the above two lines of code we can already see that there are null values in Fast_Charge and Price. Battery, Efficiency, Range, Top Speed and Acceleration all look good, having no null rows. This will mean we need to do more scrutiny.\n\n# Explore the Data\n\n1. View,\n2. Get Descriptive Data,\n3. Count and See the Cars without Prices\n4. Count and See the Cars with Prices\n5. Make a Determination Regarding Null Price Values\n6. Check for Duplicates\n7. Remove Duplicates","metadata":{"id":"7PM3Feh1GDqR"}},{"cell_type":"code","source":"evs.head()","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:47.847839Z","iopub.execute_input":"2023-12-08T05:31:47.848225Z","iopub.status.idle":"2023-12-08T05:31:47.870033Z","shell.execute_reply.started":"2023-12-08T05:31:47.848198Z","shell.execute_reply":"2023-12-08T05:31:47.868933Z"},"id":"AXNLOVdTGDqR","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"evs.describe()","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:48.540239Z","iopub.execute_input":"2023-12-08T05:31:48.54068Z","iopub.status.idle":"2023-12-08T05:31:48.575775Z","shell.execute_reply.started":"2023-12-08T05:31:48.540633Z","shell.execute_reply":"2023-12-08T05:31:48.574729Z"},"id":"XJXY16khGDqR","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Number of Cars with Null Prices = \",evs['Car_name'].loc[evs[\"Price.DE.\"].isnull()].count())\nevs[['Car_name','Price.DE.']].loc[evs[\"Price.DE.\"].isnull()].sample(11) # take a random sample","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:49.479238Z","iopub.execute_input":"2023-12-08T05:31:49.480242Z","iopub.status.idle":"2023-12-08T05:31:49.500686Z","shell.execute_reply.started":"2023-12-08T05:31:49.480206Z","shell.execute_reply":"2023-12-08T05:31:49.499376Z"},"id":"ll2CZmNGGDqR","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Number of Cars With Prices = \",evs['Car_name'].loc[evs[\"Price.DE.\"].notnull()].count())\nevs[['Car_name','Price.DE.']].loc[evs[\"Price.DE.\"].notnull()].sample(12) # take a random sample","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:50.623717Z","iopub.execute_input":"2023-12-08T05:31:50.624094Z","iopub.status.idle":"2023-12-08T05:31:50.653414Z","shell.execute_reply.started":"2023-12-08T05:31:50.624066Z","shell.execute_reply":"2023-12-08T05:31:50.640574Z"},"id":"jS9j6CcKGDqR","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In this instance, it seems that the newer cars do not have a price. This is understandable, the author of the dataset probably has access to car specifications before they hit the dealerships and are available for sale. The Mercedes and Lexus UX 300e are good examples. We will caveat our results with these findings, and remove the data without prices.","metadata":{"id":"0b2X35WoGDqR"}},{"cell_type":"code","source":"evsclean = evs.loc[evs['Price.DE.'].notnull()]\nevsclean.info()","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:31:54.544456Z","iopub.execute_input":"2023-12-08T05:31:54.544889Z","iopub.status.idle":"2023-12-08T05:31:54.560638Z","shell.execute_reply.started":"2023-12-08T05:31:54.544852Z","shell.execute_reply":"2023-12-08T05:31:54.559542Z"},"id":"o1hFGUImGDqR","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We have a dataset with 309 entries, each has a price, and range.\n\nNext we check for duplicates and delete them if we find any.\n\n","metadata":{"id":"5ET5mIWwGDqS"}},{"cell_type":"code","source":"evsclean_dupes = evsclean.duplicated()\nprint(\"There are \", evsclean_dupes.sum(), \" duplicated rows.\")\n\n# if necessary drop them\n# evsclean.drop_duplicates(inplace=True)\n\nevsclean.info()","metadata":{"execution":{"iopub.status.busy":"2023-12-08T05:37:43.230043Z","iopub.execute_input":"2023-12-08T05:37:43.230453Z","iopub.status.idle":"2023-12-08T05:37:43.248515Z","shell.execute_reply.started":"2023-12-08T05:37:43.230421Z","shell.execute_reply":"2023-12-08T05:37:43.247165Z"},"id":"wUmfnJ1pGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n\n# Visualize the Data\n\n1. Histogram EV's Price\n2. Histomgram EV's Range\n3. Correlations  ","metadata":{"id":"Qf5xM2QvGDqS"}},{"cell_type":"code","source":"plt.hist(x= evsclean['Price.DE.'] , density=False, orientation='horizontal')\nplt.xlabel(\"Count\")\nplt.ylabel('Price')\nplt.title(\"Histogram of EV Prices\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:06:19.605751Z","iopub.execute_input":"2023-12-08T02:06:19.606205Z","iopub.status.idle":"2023-12-08T02:06:19.880102Z","shell.execute_reply.started":"2023-12-08T02:06:19.606169Z","shell.execute_reply":"2023-12-08T02:06:19.878874Z"},"id":"T3kOZmVRGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.hist(x=evsclean['Range'],orientation='horizontal')\nplt.xlabel('Count')\nplt.ylabel('Range in Km')\nplt.title(\"Histogram of EV Range\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:06:23.890438Z","iopub.execute_input":"2023-12-08T02:06:23.890863Z","iopub.status.idle":"2023-12-08T02:06:24.138623Z","shell.execute_reply.started":"2023-12-08T02:06:23.890827Z","shell.execute_reply":"2023-12-08T02:06:24.137561Z"},"id":"nF75QrjuGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#take correlations of dataframe\ncorrelations = evsclean.corr(numeric_only=True)\nplt.figure(figsize=(8,6))\nsns.heatmap(correlations, annot = True, cmap='Reds_r')\nplt.title(\"Correlations Heatmap\")\nplt.show()\n\n#get exact correlation for range ~ price\ncheckable = evsclean['Price.DE.'].corr(evsclean.Range)\nprint(\"Exact Correlation = \", checkable)","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:25:13.354877Z","iopub.execute_input":"2023-12-08T02:25:13.355315Z","iopub.status.idle":"2023-12-08T02:25:13.915348Z","shell.execute_reply.started":"2023-12-08T02:25:13.355278Z","shell.execute_reply":"2023-12-08T02:25:13.914446Z"},"id":"E5tVA9njGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The First Histograms shows that there is a minimum price, and few cars at that price. There are a number of cars in the midrange of price, and then fewer as price increases. This looks like a normal distribution that is skewed to the right.\n\nThe Second Histogram shows that there is a minimum range with several cars able to attain the range. Car counts increase as we increase the range to the midpoint. Then count of cars falls off as we increase the range to the limit. This looks like a normal distribution that is skewed to the right.\n\nThe Correlation Matrix confirms that range and price have a .59 correlation. That is to say that a simple regression of the price on range will have an $R^2$ (coefficient of determination) value of $.59^2$. We'll confirm this in the next step.\n","metadata":{"id":"YCymNKSBGDqS"}},{"cell_type":"markdown","source":"# Simple Linear Regression\n\n1. Set Simple Variables (for reading ease)\n2. Regress Price on Range (output intercept, coefficient, and equation)\n3. Confirm $.59^2$ Coefficient of Determination\n4. Visualize the Outcome\n5. Show how to compute MAD, MAE, MSE, & MAPE from SciKit-Learn functions\n","metadata":{"id":"7-tVRy0VGDqS"}},{"cell_type":"code","source":"# clean variables from dataframe\nx = evsclean['Price.DE.'].values.reshape(-1,1)\ny = evsclean['Range'].values\n\n#create the regression and predict the values\nrange2price = LinearRegression().fit(x,y)\nr2pout = range2price.predict(x)\nprint(\"Price Coefficient:\",range2price.coef_[0])\nprint(\"Intercept:\",range2price.intercept_)\nprint(\"Equation: range = \", range2price.coef_[0] , ' * price + ' , range2price.intercept_)\n\n#get a R2 score\nscorer2p = round(range2price.score(x,y),5)\nprint(\"Coefficient of Determination (R2):\", scorer2p)\n\n# Check that... Coefficient of Determination should equal correlation squared.\nprint(\"Is the Score the Square of the Correlation?\",round(range2price.score(x,y),5) == round((checkable ** 2),5))","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:43:54.280817Z","iopub.execute_input":"2023-12-08T02:43:54.28133Z","iopub.status.idle":"2023-12-08T02:43:54.296294Z","shell.execute_reply.started":"2023-12-08T02:43:54.281292Z","shell.execute_reply":"2023-12-08T02:43:54.294966Z"},"id":"GwAj-hqDGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.regplot(data = evsclean , x=\"Price.DE.\", y= 'Range',\n           line_kws = {\"color\":'black'},\n            ci=.90,)","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:43:57.010264Z","iopub.execute_input":"2023-12-08T02:43:57.010666Z","iopub.status.idle":"2023-12-08T02:43:57.483935Z","shell.execute_reply.started":"2023-12-08T02:43:57.010633Z","shell.execute_reply":"2023-12-08T02:43:57.482747Z"},"id":"Ku0WLE7HGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Compute Metrics (MAE, MAD, MSE, & MAPE)","metadata":{"id":"-o5IrcUjGDqS"}},{"cell_type":"code","source":"#Compute the Performance Metrics\n#Notice how I imported the libraries above\nmae = MAE(r2pout,y)\nmae = round(mae,4)\nprint(\"Mean Absolute Error:\",mae)\n\nmad = MAD(r2pout,y)\nmad = round(mad,4)\nprint(\"Median Absolute Error:\",mad)\n\nmse = MSE(r2pout,y)\nmse = round(mse,4)\nprint(\"Mean Squared Error:\",mse)\n\nmape = MAPE(r2pout,y)\nmape = round(mape,4)\nprint(\"Mean Absolute Percentage Error:\",mape)","metadata":{"execution":{"iopub.status.busy":"2023-12-08T02:55:10.145114Z","iopub.execute_input":"2023-12-08T02:55:10.145532Z","iopub.status.idle":"2023-12-08T02:55:10.156465Z","shell.execute_reply.started":"2023-12-08T02:55:10.145499Z","shell.execute_reply":"2023-12-08T02:55:10.155487Z"},"id":"_rmCASCaGDqS","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This notebook showed how to make a simple linear regression in Python with the scikit-learn linear regression function. We then showed that $R^2$ for the regression is the same as the correlation coefficient squared. Finally we computed four performance metrics for the regression.\n\nIf you liked this notebook, please give an upvote.","metadata":{"id":"YW5hqw9tGDqS"}},{"cell_type":"code","source":"","metadata":{"id":"OTRpQ0EUGDqS"},"execution_count":null,"outputs":[]}]}